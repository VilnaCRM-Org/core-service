openapi: 3.1.0
info:
  title: 'Core Service API'
  description: 'This API provides endpoints to manage core service data within a VilnaCRM.'
  version: 1.0.0
servers:
  -
    url: /
    description: ''
paths:
  /api/customers:
    get:
      operationId: api_customers_get_collection
      tags:
        - Customer
      responses:
        '200':
          description: 'Customer collection'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  member: { type: array, items: { $ref: '#/components/schemas/Customer.jsonld' } }
                  totalItems: { type: integer, minimum: 0 }
                  view: { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, first: { type: string, format: iri-reference }, last: { type: string, format: iri-reference }, previous: { type: string, format: iri-reference }, next: { type: string, format: iri-reference } }, example: { '@id': string, type: string, first: string, last: string, previous: string, next: string } }
                  search: { type: object, properties: { '@type': { type: string }, template: { type: string }, variableRepresentation: { type: string }, mapping: { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: [string, 'null'] }, required: { type: boolean } } } } } }
                required:
                  - member
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Retrieves the collection of Customer resources.'
      description: 'Retrieves the collection of Customer resources.'
      parameters:
        -
          name: page
          in: query
          description: 'The collection page number'
          required: false
          deprecated: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 1
          style: form
          explode: false
          allowReserved: false
        -
          name: itemsPerPage
          in: query
          description: 'The number of items per page'
          required: false
          deprecated: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 30
            minimum: 0
          style: form
          explode: false
          allowReserved: false
        -
          name: initials
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'initials[]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          allowReserved: false
        -
          name: email
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'email[]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          allowReserved: false
        -
          name: phone
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'phone[]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          allowReserved: false
        -
          name: leadSource
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'leadSource[]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          allowReserved: false
        -
          name: type.value
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'type.value[]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          allowReserved: false
        -
          name: status.value
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'status.value[]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          allowReserved: false
        -
          name: confirmed
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: boolean
          style: form
          explode: false
          allowReserved: false
        -
          name: 'confirmed[]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: array
            items:
              type: boolean
          style: form
          explode: true
          allowReserved: false
        -
          name: 'order[ulid]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[createdAt]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[updatedAt]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[email]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[phone]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[leadSource]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[type.value]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[status.value]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'createdAt[before]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'createdAt[strictly_before]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'createdAt[after]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'createdAt[strictly_after]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'updatedAt[before]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'updatedAt[strictly_before]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'updatedAt[after]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'updatedAt[strictly_after]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[lt]'
          in: query
          description: 'Filter on the ulid property using the lt operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[lte]'
          in: query
          description: 'Filter on the ulid property using the lte operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[gt]'
          in: query
          description: 'Filter on the ulid property using the gt operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[gte]'
          in: query
          description: 'Filter on the ulid property using the gte operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[between]'
          in: query
          description: 'Filter on the ulid property using the between operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
      deprecated: false
    post:
      operationId: api_customers_post
      tags:
        - Customer
      responses:
        '201':
          description: 'Customer resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer.jsonld'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Creates a Customer resource.'
      description: 'Creates a Customer resource.'
      parameters: []
      requestBody:
        content:
          application/ld+json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 255
                  format: email
                phone:
                  type: string
                  maxLength: 255
                  format: null
                initials:
                  type: string
                  maxLength: 255
                  format: null
                leadSource:
                  type: string
                  maxLength: 255
                  format: null
                type:
                  type: iri-reference
                  maxLength: 255
                  format: null
                status:
                  type: iri-reference
                  maxLength: 255
                  format: null
                confirmed:
                  type: boolean
                  maxLength: null
                  format: null
              required:
                - email
                - phone
                - initials
                - leadSource
                - type
                - status
                - confirmed
            example:
              email: customer@example.com
              phone: '0123456789'
              initials: 'Name Surname'
              leadSource: Google
              type: /api/customer_types/768e998b-31cb-419d-a02c-6ae9d5b4f447
              status: /api/customer_statuses/c27f0884-8b6f-45db-858d-9a987a1d20d7
              confirmed: true
        required: true
      deprecated: false
  '/api/customers/{ulid}':
    get:
      operationId: api_customers_ulid_get
      tags:
        - Customer
      responses:
        '200':
          description: 'Customer resource'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer.jsonld'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'Customer not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'Customer not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Retrieves a Customer resource.'
      description: 'Retrieves a Customer resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'Customer identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      deprecated: false
    put:
      operationId: api_customers_ulid_put
      tags:
        - Customer
      responses:
        '200':
          description: 'Customer resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer.jsonld'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'Customer not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'Customer not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Replaces the Customer resource.'
      description: 'Replaces the Customer resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'Customer identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      requestBody:
        content:
          application/ld+json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 255
                  format: email
                phone:
                  type: string
                  maxLength: 255
                  format: null
                initials:
                  type: string
                  maxLength: 255
                  format: null
                leadSource:
                  type: string
                  maxLength: 255
                  format: null
                type:
                  type: iri-reference
                  maxLength: 255
                  format: null
                status:
                  type: iri-reference
                  maxLength: 255
                  format: null
                confirmed:
                  type: boolean
                  maxLength: null
                  format: null
              required:
                - email
                - phone
                - initials
                - leadSource
                - type
                - status
                - confirmed
            example:
              email: customer@example.com
              phone: '0123456789'
              initials: 'Name Surname'
              leadSource: Google
              type: /api/customer_types/768e998b-31cb-419d-a02c-6ae9d5b4f447
              status: /api/customer_statuses/c27f0884-8b6f-45db-858d-9a987a1d20d7
              confirmed: true
        required: true
      deprecated: false
    delete:
      operationId: api_customers_ulid_delete
      tags:
        - Customer
      responses:
        '204':
          description: 'Customer resource deleted'
          content:
            application/problem+json:
              example: ''
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'Customer not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'Customer not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Removes the Customer resource.'
      description: 'Removes the Customer resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'Customer identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      deprecated: false
    patch:
      operationId: api_customers_ulid_patch
      tags:
        - Customer
      responses:
        '200':
          description: 'Customer resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer.jsonld'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'Customer not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'Customer not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Updates the Customer resource.'
      description: 'Updates the Customer resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'Customer identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 255
                  format: email
                phone:
                  type: string
                  maxLength: 255
                  format: null
                initials:
                  type: string
                  maxLength: 255
                  format: null
                leadSource:
                  type: string
                  maxLength: 255
                  format: null
                type:
                  type: iri-reference
                  maxLength: 255
                  format: null
                status:
                  type: iri-reference
                  maxLength: 255
                  format: null
                confirmed:
                  type: boolean
                  maxLength: null
                  format: null
              required: []
            example:
              email: customer@example.com
              phone: '0123456789'
              initials: 'Name Surname'
              leadSource: Google
              type: /api/customer_types/768e998b-31cb-419d-a02c-6ae9d5b4f447
              status: /api/customer_statuses/c27f0884-8b6f-45db-858d-9a987a1d20d7
              confirmed: true
        required: true
      deprecated: false
  /api/customer_statuses:
    get:
      operationId: api_customer_statuses_get_collection
      tags:
        - CustomerStatus
      responses:
        '200':
          description: 'CustomerStatus collection'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  member: { type: array, items: { $ref: '#/components/schemas/CustomerStatus.jsonld' } }
                  totalItems: { type: integer, minimum: 0 }
                  view: { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, first: { type: string, format: iri-reference }, last: { type: string, format: iri-reference }, previous: { type: string, format: iri-reference }, next: { type: string, format: iri-reference } }, example: { '@id': string, type: string, first: string, last: string, previous: string, next: string } }
                  search: { type: object, properties: { '@type': { type: string }, template: { type: string }, variableRepresentation: { type: string }, mapping: { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: [string, 'null'] }, required: { type: boolean } } } } } }
                required:
                  - member
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Retrieves the collection of CustomerStatus resources.'
      description: 'Retrieves the collection of CustomerStatus resources.'
      parameters:
        -
          name: page
          in: query
          description: 'The collection page number'
          required: false
          deprecated: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 1
          style: form
          explode: false
          allowReserved: false
        -
          name: itemsPerPage
          in: query
          description: 'The number of items per page'
          required: false
          deprecated: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 30
            minimum: 0
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[ulid]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[value]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: value
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[lt]'
          in: query
          description: 'Filter on the ulid property using the lt operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[lte]'
          in: query
          description: 'Filter on the ulid property using the lte operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[gt]'
          in: query
          description: 'Filter on the ulid property using the gt operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[gte]'
          in: query
          description: 'Filter on the ulid property using the gte operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[between]'
          in: query
          description: 'Filter on the ulid property using the between operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
      deprecated: false
    post:
      operationId: api_customer_statuses_post
      tags:
        - CustomerStatus
      responses:
        '201':
          description: 'CustomerStatus resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerStatus.jsonld'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Creates a CustomerStatus resource.'
      description: 'Creates a CustomerStatus resource.'
      parameters: []
      requestBody:
        content:
          application/ld+json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  maxLength: 255
                  format: null
              required:
                - value
            example:
              value: Active
        required: true
      deprecated: false
  '/api/customer_statuses/{ulid}':
    get:
      operationId: api_customer_statuses_ulid_get
      tags:
        - CustomerStatus
      responses:
        '200':
          description: 'CustomerStatus resource'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerStatus.jsonld'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerStatus not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerStatus not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Retrieves a CustomerStatus resource.'
      description: 'Retrieves a CustomerStatus resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerStatus identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      deprecated: false
    put:
      operationId: api_customer_statuses_ulid_put
      tags:
        - CustomerStatus
      responses:
        '200':
          description: 'CustomerStatus resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerStatus.jsonld'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerStatus not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerStatus not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Replaces the CustomerStatus resource.'
      description: 'Replaces the CustomerStatus resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerStatus identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      requestBody:
        content:
          application/ld+json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  maxLength: 255
                  format: null
              required:
                - value
            example:
              value: Active
        required: true
      deprecated: false
    delete:
      operationId: api_customer_statuses_ulid_delete
      tags:
        - CustomerStatus
      responses:
        '204':
          description: 'CustomerStatus resource deleted'
          content:
            application/problem+json:
              example: ''
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerStatus not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerStatus not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Removes the CustomerStatus resource.'
      description: 'Removes the CustomerStatus resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerStatus identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      deprecated: false
    patch:
      operationId: api_customer_statuses_ulid_patch
      tags:
        - CustomerStatus
      responses:
        '200':
          description: 'CustomerStatus resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerStatus.jsonld'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerStatus not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerStatus not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Updates the CustomerStatus resource.'
      description: 'Updates the CustomerStatus resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerStatus identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  maxLength: 255
                  format: null
              required:
                - value
            example:
              value: Active
        required: true
      deprecated: false
  /api/customer_types:
    get:
      operationId: api_customer_types_get_collection
      tags:
        - CustomerType
      responses:
        '200':
          description: 'CustomerType collection'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  member: { type: array, items: { $ref: '#/components/schemas/CustomerType.jsonld-output' } }
                  totalItems: { type: integer, minimum: 0 }
                  view: { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, first: { type: string, format: iri-reference }, last: { type: string, format: iri-reference }, previous: { type: string, format: iri-reference }, next: { type: string, format: iri-reference } }, example: { '@id': string, type: string, first: string, last: string, previous: string, next: string } }
                  search: { type: object, properties: { '@type': { type: string }, template: { type: string }, variableRepresentation: { type: string }, mapping: { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: [string, 'null'] }, required: { type: boolean } } } } } }
                required:
                  - member
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Retrieves the collection of CustomerType resources.'
      description: 'Retrieves the collection of CustomerType resources.'
      parameters:
        -
          name: page
          in: query
          description: 'The collection page number'
          required: false
          deprecated: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 1
          style: form
          explode: false
          allowReserved: false
        -
          name: itemsPerPage
          in: query
          description: 'The number of items per page'
          required: false
          deprecated: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 30
            minimum: 0
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[ulid]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: 'order[value]'
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          style: form
          explode: false
          allowReserved: false
        -
          name: value
          in: query
          description: ''
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[lt]'
          in: query
          description: 'Filter on the ulid property using the lt operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[lte]'
          in: query
          description: 'Filter on the ulid property using the lte operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[gt]'
          in: query
          description: 'Filter on the ulid property using the gt operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[gte]'
          in: query
          description: 'Filter on the ulid property using the gte operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
        -
          name: 'ulid[between]'
          in: query
          description: 'Filter on the ulid property using the between operator'
          required: false
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: form
          explode: false
          allowReserved: false
      deprecated: false
    post:
      operationId: api_customer_types_post
      tags:
        - CustomerType
      responses:
        '201':
          description: 'CustomerType resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerType.jsonld-output'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Creates a CustomerType resource.'
      description: 'Creates a CustomerType resource.'
      parameters: []
      requestBody:
        content:
          application/ld+json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  maxLength: 255
                  format: null
              required:
                - value
            example:
              value: Prospect
        required: true
      deprecated: false
  '/api/customer_types/{ulid}':
    get:
      operationId: api_customer_types_ulid_get
      tags:
        - CustomerType
      responses:
        '200':
          description: 'CustomerType resource'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerType.jsonld-output'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerType not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerType not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Retrieves a CustomerType resource.'
      description: 'Retrieves a CustomerType resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerType identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      deprecated: false
    put:
      operationId: api_customer_types_ulid_put
      tags:
        - CustomerType
      responses:
        '200':
          description: 'CustomerType resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerType.jsonld-output'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerType not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerType not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Replaces the CustomerType resource.'
      description: 'Replaces the CustomerType resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerType identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      requestBody:
        content:
          application/ld+json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  maxLength: 255
                  format: null
              required:
                - value
            example:
              value: Prospect
        required: true
      deprecated: false
    delete:
      operationId: api_customer_types_ulid_delete
      tags:
        - CustomerType
      responses:
        '204':
          description: 'CustomerType resource deleted'
          content:
            application/problem+json:
              example: ''
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerType not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerType not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Removes the CustomerType resource.'
      description: 'Removes the CustomerType resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerType identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      deprecated: false
    patch:
      operationId: api_customer_types_ulid_patch
      tags:
        - CustomerType
      responses:
        '200':
          description: 'CustomerType resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerType.jsonld-output'
          links: {  }
        '400':
          description: 'Bad request'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'The input data is misformatted.'
                status: 400
          headers: {  }
        '422':
          description: 'Validation error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  violations: { type: array, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - violations
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'some_property: This value should not be blank.'
                violations:
                  propertyPath: some_property
                  message: 'This value should not be blank.'
                  code: c1051bb4-d103-4f74-8988-acbcafc7fdc3
                status: 422
          headers: {  }
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.2'
                title: Unauthorized
                detail: 'Authentication credentials are missing or invalid.'
                status: 401
          headers: {  }
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10.4.4'
                title: Forbidden
                detail: 'The server understood the request, but refuses to authorize it.'
                status: 403
          headers: {  }
        '404':
          description: 'CustomerType not found'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: 'https://tools.ietf.org/html/rfc2616#section-10'
                title: 'An error occurred'
                detail: 'CustomerType not found'
                status: 404
          headers: {  }
        '500':
          description: 'Internal server error'
          content:
            application/problem+json:
              schema:
                type: object
                properties:
                  type: { type: string, maxLength: null, format: null }
                  title: { type: string, maxLength: null, format: null }
                  detail: { type: string, maxLength: null, format: null }
                  status: { type: integer, maxLength: null, format: null }
                required:
                  - type
                  - title
                  - detail
                  - status
              example:
                type: /errors/500
                title: 'An error occurred'
                detail: 'Something went wrong'
                status: 500
          headers: {  }
      summary: 'Updates the CustomerType resource.'
      description: 'Updates the CustomerType resource.'
      parameters:
        -
          name: ulid
          in: path
          description: 'CustomerType identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
          example: 01JKX8XGHVDZ46MWYMZT94YER4
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  maxLength: 255
                  format: null
              required:
                - value
            example:
              value: Prospect
        required: true
      deprecated: false
  /api/health:
    get:
      operationId: api_health_get
      tags:
        - HealthCheck
      responses:
        '204':
          description: 'Health check passed with no content to return.'
        '500':
          description: 'Health check failed.'
      summary: 'Retrieves a HealthCheck resource.'
      description: 'Retrieves a HealthCheck resource.'
      parameters: []
      deprecated: false
components:
  schemas:
    ConstraintViolation-json:
      type: object
      description: 'Unprocessable entity'
      deprecated: false
      properties:
        status:
          default: 422
          example: 422
          type: integer
        violations:
          type: array
          items:
            type: object
            properties:
              propertyPath:
                type: string
                description: 'The property path of the violation'
              message:
                type: string
                description: 'The message associated with the violation'
        detail:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
        title:
          readOnly: true
          type:
            - string
            - 'null'
        instance:
          readOnly: true
          type:
            - string
            - 'null'
    Customer.CustomerCreateDto.jsonld:
      type: object
      description: ''
      deprecated: false
      required:
        - initials
        - email
        - phone
        - leadSource
        - type
        - status
      properties:
        initials:
          maxLength: 255
          type:
            - string
            - 'null'
        email:
          format: email
          maxLength: 255
          externalDocs:
            url: 'https://schema.org/email'
          type:
            - string
            - 'null'
        phone:
          maxLength: 255
          type:
            - string
            - 'null'
        leadSource:
          maxLength: 255
          type:
            - string
            - 'null'
        type:
          type:
            - string
            - 'null'
        status:
          type:
            - string
            - 'null'
        confirmed:
          type:
            - boolean
            - 'null'
    Customer.CustomerPatchDto:
      type: object
      description: ''
      deprecated: false
      properties:
        initials:
          maxLength: 255
          type:
            - string
            - 'null'
        email:
          format: email
          maxLength: 255
          externalDocs:
            url: 'https://schema.org/email'
          type:
            - string
            - 'null'
        phone:
          maxLength: 255
          type:
            - string
            - 'null'
        leadSource:
          maxLength: 255
          type:
            - string
            - 'null'
        type:
          type:
            - string
            - 'null'
        status:
          type:
            - string
            - 'null'
        confirmed:
          type:
            - boolean
            - 'null'
    Customer.CustomerPutDto.jsonld:
      type: object
      description: ''
      deprecated: false
      required:
        - initials
        - email
        - phone
        - leadSource
        - type
        - status
      properties:
        initials:
          maxLength: 255
          type:
            - string
            - 'null'
        email:
          format: email
          maxLength: 255
          externalDocs:
            url: 'https://schema.org/email'
          type:
            - string
            - 'null'
        phone:
          maxLength: 255
          type:
            - string
            - 'null'
        leadSource:
          maxLength: 255
          type:
            - string
            - 'null'
        type:
          type:
            - string
            - 'null'
        status:
          type:
            - string
            - 'null'
        confirmed:
          type:
            - boolean
            - 'null'
    Customer.jsonld:
      type: object
      description: ''
      deprecated: false
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        initials:
          type: string
        email:
          type: string
        phone:
          type: string
        leadSource:
          type: string
        type:
          type: string
          format: iri-reference
          example: 'https://example.com/'
        status:
          type: string
          format: iri-reference
          example: 'https://example.com/'
        confirmed:
          type: boolean
        ulid:
          $ref: '#/components/schemas/UlidInterface.jsonld'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CustomerStatus.CustomerStatusPatchDto:
      type: object
      description: ''
      deprecated: false
      properties:
        value:
          maxLength: 255
          type:
            - string
            - 'null'
    CustomerStatus.CustomerStatusPutDto.jsonld:
      type: object
      description: ''
      deprecated: false
      required:
        - value
      properties:
        value:
          maxLength: 255
          type:
            - string
            - 'null'
    CustomerStatus.StatusCreateDto.jsonld:
      type: object
      description: ''
      deprecated: false
      required:
        - value
      properties:
        value:
          maxLength: 255
          type:
            - string
            - 'null'
    CustomerStatus.jsonld:
      type: object
      description: ''
      deprecated: false
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        value:
          type: string
        ulid:
          type: string
    CustomerType.CustomerTypePatchDto:
      type: object
      description: ''
      deprecated: false
      properties:
        value:
          maxLength: 255
          type:
            - string
            - 'null'
    CustomerType.CustomerTypePutDto.jsonld:
      type: object
      description: ''
      deprecated: false
      required:
        - value
      properties:
        value:
          maxLength: 255
          type:
            - string
            - 'null'
    CustomerType.TypeCreateDto.jsonld:
      type: object
      description: ''
      deprecated: false
      required:
        - value
      properties:
        value:
          maxLength: 255
          type:
            - string
            - 'null'
    CustomerType.jsonld-output:
      type: object
      description: ''
      deprecated: false
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        value:
          type: string
        ulid:
          $ref: '#/components/schemas/UlidInterface.jsonld-output'
    Error:
      type: object
      description: 'A representation of common errors.'
      deprecated: false
      properties:
        title:
          readOnly: true
          description: 'A short, human-readable summary of the problem.'
          type:
            - string
            - 'null'
        detail:
          readOnly: true
          description: 'A human-readable explanation specific to this occurrence of the problem.'
          type:
            - string
            - 'null'
        status:
          type: number
          example: 404
          default: 400
        instance:
          readOnly: true
          description: 'A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.'
          type:
            - string
            - 'null'
        type:
          readOnly: true
          description: 'A URI reference that identifies the problem type'
          type: string
    HealthCheck.jsonld:
      type: object
      description: ''
      deprecated: false
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
    UlidInterface.jsonld:
      type: object
      description: ''
      deprecated: false
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
    UlidInterface.jsonld-output:
      type: object
      description: ''
      deprecated: false
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
  responses: {  }
  parameters: {  }
  examples: {  }
  requestBodies: {  }
  headers: {  }
  securitySchemes: {  }
security: []
tags:
  -
    name: CustomerStatus
  -
    name: CustomerType
  -
    name: Customer
  -
    name: HealthCheck
webhooks: {  }
