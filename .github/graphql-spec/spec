type Query {
  node(id: ID!): Node
  customer(id: ID!): Customer
  customers(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): CustomerCursorConnection
  customerStatus(id: ID!): CustomerStatus
  customerStatuses(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): CustomerStatusCursorConnection
  customerType(id: ID!): CustomerType
  customerTypes(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): CustomerTypeCursorConnection
  healthCheck(id: ID!): HealthCheck
  healthChecks(
    "Returns the first n elements from the list."
    first: Int

    "Returns the last n elements from the list."
    last: Int

    "Returns the elements in the list that come before the specified cursor."
    before: String

    "Returns the elements in the list that come after the specified cursor."
    after: String
  ): HealthCheckCursorConnection
}

"A node, according to the Relay specification."
interface Node {
  "The id of this node."
  id: ID!
}

type Customer implements Node {
  id: ID!
  initials: String!
  email: String!
  phone: String!
  leadSource: String!
  type: CustomerType!
  status: CustomerStatus!
  confirmed: Boolean!
  createdAt: String!
  updatedAt: String!
}

type CustomerType implements Node {
  id: ID!
  value: String!
}

type CustomerStatus implements Node {
  id: ID!
  value: String!
}

"Cursor connection for Customer."
type CustomerCursorConnection {
  edges: [CustomerEdge]
  pageInfo: CustomerPageInfo!
  totalCount: Int!
}

"Edge of Customer."
type CustomerEdge {
  node: Customer
  cursor: String!
}

"Information about the current page."
type CustomerPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"Cursor connection for CustomerStatus."
type CustomerStatusCursorConnection {
  edges: [CustomerStatusEdge]
  pageInfo: CustomerStatusPageInfo!
  totalCount: Int!
}

"Edge of CustomerStatus."
type CustomerStatusEdge {
  node: CustomerStatus
  cursor: String!
}

"Information about the current page."
type CustomerStatusPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"Cursor connection for CustomerType."
type CustomerTypeCursorConnection {
  edges: [CustomerTypeEdge]
  pageInfo: CustomerTypePageInfo!
  totalCount: Int!
}

"Edge of CustomerType."
type CustomerTypeEdge {
  node: CustomerType
  cursor: String!
}

"Information about the current page."
type CustomerTypePageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type HealthCheck implements Node {
  id: ID!
}

"Cursor connection for HealthCheck."
type HealthCheckCursorConnection {
  edges: [HealthCheckEdge]
  pageInfo: HealthCheckPageInfo!
  totalCount: Int!
}

"Edge of HealthCheck."
type HealthCheckEdge {
  node: HealthCheck
  cursor: String!
}

"Information about the current page."
type HealthCheckPageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Mutation {
  "CreateCustomers a Customer."
  createCustomerCustomer(input: createCustomerCustomerInput!): createCustomerCustomerPayload

  "UpdateCustomers a Customer."
  updateCustomerCustomer(input: updateCustomerCustomerInput!): updateCustomerCustomerPayload

  "DeleteCustomers a Customer."
  deleteCustomerCustomer(input: deleteCustomerCustomerInput!): deleteCustomerCustomerPayload

  "CreateCustomerStatuss a CustomerStatus."
  createCustomerStatusCustomerStatus(input: createCustomerStatusCustomerStatusInput!): createCustomerStatusCustomerStatusPayload

  "UpdateCustomerStatuss a CustomerStatus."
  updateCustomerStatusCustomerStatus(input: updateCustomerStatusCustomerStatusInput!): updateCustomerStatusCustomerStatusPayload

  "DeleteCustomerStatuss a CustomerStatus."
  deleteCustomerStatusCustomerStatus(input: deleteCustomerStatusCustomerStatusInput!): deleteCustomerStatusCustomerStatusPayload

  "CreateCustomerTypes a CustomerType."
  createCustomerTypeCustomerType(input: createCustomerTypeCustomerTypeInput!): createCustomerTypeCustomerTypePayload

  "UpdateCustomerTypes a CustomerType."
  updateCustomerTypeCustomerType(input: updateCustomerTypeCustomerTypeInput!): updateCustomerTypeCustomerTypePayload

  "DeleteCustomerTypes a CustomerType."
  deleteCustomerTypeCustomerType(input: deleteCustomerTypeCustomerTypeInput!): deleteCustomerTypeCustomerTypePayload

  "Updates a HealthCheck."
  updateHealthCheck(input: updateHealthCheckInput!): updateHealthCheckPayload

  "Deletes a HealthCheck."
  deleteHealthCheck(input: deleteHealthCheckInput!): deleteHealthCheckPayload

  "Creates a HealthCheck."
  createHealthCheck(input: createHealthCheckInput!): createHealthCheckPayload
}

"CreateCustomers a Customer."
input createCustomerCustomerInput {
  id: ID!
  initials: String!
  email: String!
  phone: String!
  leadSource: String!
  type: String!
  status: String!
  confirmed: Boolean!
  createdAt: String!
  updatedAt: String!
  clientMutationId: String
}

"CreateCustomers a Customer."
type createCustomerCustomerPayload {
  customer: Customer
  clientMutationId: String
}

"UpdateCustomers a Customer."
input updateCustomerCustomerInput {
  id: ID!
  initials: String!
  email: String!
  phone: String!
  leadSource: String!
  type: String!
  status: String!
  confirmed: Boolean!
  createdAt: String!
  updatedAt: String!
  clientMutationId: String
}

"UpdateCustomers a Customer."
type updateCustomerCustomerPayload {
  customer: Customer
  clientMutationId: String
}

"DeleteCustomers a Customer."
input deleteCustomerCustomerInput {
  id: ID!
  initials: String!
  email: String!
  phone: String!
  leadSource: String!
  type: String!
  status: String!
  confirmed: Boolean!
  createdAt: String!
  updatedAt: String!
  clientMutationId: String
}

"DeleteCustomers a Customer."
type deleteCustomerCustomerPayload {
  customer: Customer
  clientMutationId: String
}

"CreateCustomerStatuss a CustomerStatus."
input createCustomerStatusCustomerStatusInput {
  id: ID!
  value: String!
  clientMutationId: String
}

"CreateCustomerStatuss a CustomerStatus."
type createCustomerStatusCustomerStatusPayload {
  customerStatus: CustomerStatus
  clientMutationId: String
}

"UpdateCustomerStatuss a CustomerStatus."
input updateCustomerStatusCustomerStatusInput {
  id: ID!
  value: String!
  clientMutationId: String
}

"UpdateCustomerStatuss a CustomerStatus."
type updateCustomerStatusCustomerStatusPayload {
  customerStatus: CustomerStatus
  clientMutationId: String
}

"DeleteCustomerStatuss a CustomerStatus."
input deleteCustomerStatusCustomerStatusInput {
  id: ID!
  value: String!
  clientMutationId: String
}

"DeleteCustomerStatuss a CustomerStatus."
type deleteCustomerStatusCustomerStatusPayload {
  customerStatus: CustomerStatus
  clientMutationId: String
}

"CreateCustomerTypes a CustomerType."
input createCustomerTypeCustomerTypeInput {
  id: ID!
  value: String!
  clientMutationId: String
}

"CreateCustomerTypes a CustomerType."
type createCustomerTypeCustomerTypePayload {
  customerType: CustomerType
  clientMutationId: String
}

"UpdateCustomerTypes a CustomerType."
input updateCustomerTypeCustomerTypeInput {
  id: ID!
  value: String!
  clientMutationId: String
}

"UpdateCustomerTypes a CustomerType."
type updateCustomerTypeCustomerTypePayload {
  customerType: CustomerType
  clientMutationId: String
}

"DeleteCustomerTypes a CustomerType."
input deleteCustomerTypeCustomerTypeInput {
  id: ID!
  value: String!
  clientMutationId: String
}

"DeleteCustomerTypes a CustomerType."
type deleteCustomerTypeCustomerTypePayload {
  customerType: CustomerType
  clientMutationId: String
}

"Updates a HealthCheck."
input updateHealthCheckInput {
  id: ID!
  clientMutationId: String
}

"Updates a HealthCheck."
type updateHealthCheckPayload {
  healthCheck: HealthCheck
  clientMutationId: String
}

"Deletes a HealthCheck."
input deleteHealthCheckInput {
  id: ID!
  clientMutationId: String
}

"Deletes a HealthCheck."
type deleteHealthCheckPayload {
  healthCheck: HealthCheck
  clientMutationId: String
}

"Creates a HealthCheck."
input createHealthCheckInput {
  clientMutationId: String
}

"Creates a HealthCheck."
type createHealthCheckPayload {
  healthCheck: HealthCheck
  clientMutationId: String
}
